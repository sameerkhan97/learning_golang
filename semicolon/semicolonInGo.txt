* Go's formal grammar uses semicolons to terminate statements, but unlike in C, those semicolons do not appear in the source.

* Instead the lexer uses a simple rule to insert semicolons automatically as it scans, so the input text is mostly free of them.

* The rule is this. If the last token before a newline is an identifier (which includes words like int and float64), a basic literal 
  such as a number or string constant, or one of the tokens : break continue fallthrough return ++ -- ) } the lexer always inserts a semicolon after the token. 
  This could be summarized as, “if the newline comes after a token that could end a statement, insert a semicolon”

* A semicolon can also be omitted immediately before a closing brace, so a statement such as below needs no semicolons
    go func() { for { dst <- <-src } }()

* Go programs have semicolons only in places such as for loop clauses, to separate the initializer, condition, and continuation elements.

IMP NOTE : One consequence of the semicolon insertion rules is that you cannot put the opening brace of a control structure (if, for, switch, or select) 
          on the next line. If you do, a semicolon will be inserted before the brace, which could cause unwanted effects. Write them like this
		if i < f() {
 		   g()
		}
	  	
		not like this
		if i < f()  // wrong!
		{           // wrong!
 		   g()
		}
